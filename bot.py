import os
import logging
import asyncio
import threading
import concurrent.futures
from pyrogram import Client, filters
import random
import string
import datetime
import subprocess
from pyrogram.types import (Message, InlineKeyboardButton, 
                           InlineKeyboardMarkup, ReplyKeyboardMarkup, 
                           KeyboardButton, CallbackQuery)
from pyrogram.errors import MessageNotModified
import ffmpeg
import re
import time
from pymongo import MongoClient
from config import *
from bson.objectid import ObjectId

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Diccionario de prioridades por plan
PLAN_PRIORITY = {
    "premium": 1,
    "pro": 2,
    "standard": 3
}

# Conexi√≥n a MongoDB
mongo_client = MongoClient(MONGO_URI)
db = mongo_client[DATABASE_NAME]
pending_col = db["pending"]
users_col = db["users"]
temp_keys_col = db["temp_keys"]
banned_col = db["banned_users"]
pending_confirmations_col = db["pending_confirmations"]
active_compressions_col = db["active_compressions"]

# Configuraci√≥n del bot
api_id = API_ID
api_hash = API_HASH
bot_token = BOT_TOKEN

app = Client(
    "compress_bot",
    api_id=api_id,
    api_hash=api_hash,
    bot_token=bot_token
)

# Administradores del bot
admin_users = ADMINS_IDS
ban_users = []

# Cargar usuarios baneados y limpiar compresiones activas al iniciar
banned_users_in_db = banned_col.find({}, {"user_id": 1})
for banned_user in banned_users_in_db:
    if banned_user["user_id"] not in ban_users:
        ban_users.append(banned_user["user_id"])

# Limpiar compresiones activas previas al iniciar
active_compressions_col.delete_many({})
logger.info("Compresiones activas previas eliminadas")

# Configuraci√≥n de compresi√≥n de video
video_settings = {
    'resolution': '854x480',
    'crf': '28',
    'audio_bitrate': '70k',
    'fps': '22',
    'preset': 'veryfast',
    'codec': 'libx264'
}

# Variables globales para la cola
compression_queue = asyncio.PriorityQueue()
processing_task = None
executor = concurrent.futures.ThreadPoolExecutor(max_workers=1)

# ======================== GESTI√ìN DE COMPRESIONES ACTIVAS ======================== #

async def has_active_compression(user_id: int) -> bool:
    """Verifica si el usuario ya tiene una compresi√≥n activa"""
    return bool(active_compressions_col.find_one({"user_id": user_id}))

async def add_active_compression(user_id: int, file_id: str):
    """Registra una nueva compresi√≥n activa"""
    active_compressions_col.insert_one({
        "user_id": user_id,
        "file_id": file_id,
        "start_time": datetime.datetime.now()
    })

async def remove_active_compression(user_id: int):
    """Elimina una compresi√≥n activa"""
    active_compressions_col.delete_one({"user_id": user_id})

# ======================== SISTEMA DE CONFIRMACI√ìN ======================== #

async def has_pending_confirmation(user_id: int) -> bool:
    """Verifica si el usuario tiene una confirmaci√≥n pendiente"""
    return bool(pending_confirmations_col.find_one({"user_id": user_id}))

async def create_confirmation(user_id: int, chat_id: int, message_id: int, file_id: str, file_name: str):
    """Crea una nueva confirmaci√≥n pendiente"""
    return pending_confirmations_col.insert_one({
        "user_id": user_id,
        "chat_id": chat_id,
        "message_id": message_id,
        "file_id": file_id,
        "file_name": file_name,
        "timestamp": datetime.datetime.now()
    }).inserted_id

async def delete_confirmation(confirmation_id: ObjectId):
    """Elimina una confirmaci√≥n pendiente"""
    pending_confirmations_col.delete_one({"_id": confirmation_id})

async def get_confirmation(confirmation_id: ObjectId):
    """Obtiene una confirmaci√≥n pendiente"""
    return pending_confirmations_col.find_one({"_id": confirmation_id})

# ======================== AUTO-REGISTRO DE USUARIOS ======================== #

async def register_new_user(user_id: int):
    """Registra un nuevo usuario si no existe"""
    if not users_col.find_one({"user_id": user_id}):
        logger.info(f"Usuario no registrado: {user_id}")

# ======================== FUNCIONES PROTECCI√ìN DE CONTENIDO ======================== #

async def should_protect_content(user_id: int) -> bool:
    """Determina si el contenido debe protegerse seg√∫n el plan del usuario"""
    if user_id in admin_users:
        return False
    user_plan = await get_user_plan(user_id)
    return user_plan is None or user_plan["plan"] == "standard"

async def send_protected_message(chat_id: int, text: str, **kwargs):
    """Env√≠a un mensaje con protecci√≥n seg√∫n el plan del usuario"""
    protect = await should_protect_content(chat_id)
    return await app.send_message(chat_id, text, protect_content=protect, **kwargs)

async def send_protected_video(chat_id: int, video: str, caption: str = None, **kwargs):
    """Env√≠a un video con protecci√≥n seg√∫n el plan del usuario"""
    protect = await should_protect_content(chat_id)
    return await app.send_video(chat_id, video, caption=caption, protect_content=protect, **kwargs)

async def send_protected_photo(chat_id: int, photo: str, caption: str = None, **kwargs):
    """Env√≠a una foto con protecci√≥n seg√∫n el plan del usuario"""
    protect = await should_protect_content(chat_id)
    return await app.send_photo(chat_id, photo, caption=caption, protect_content=protect, **kwargs)

# ======================== SISTEMA DE PRIORIDAD EN COLA ======================== #

async def get_user_priority(user_id: int) -> int:
    """Obtiene la prioridad del usuario basada en su plan"""
    user_plan = await get_user_plan(user_id)
    if user_plan is None:
        return 4  # Prioridad m√°s baja para usuarios sin plan
    return PLAN_PRIORITY.get(user_plan["plan"], 4)

# ======================== SISTEMA DE CLAVES TEMPORALES ======================== #

def generate_temp_key(plan: str, duration_days: int):
    """Genera una clave temporal v√°lida para un plan espec√≠fico"""
    key = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
    created_at = datetime.datetime.now()
    expires_at = created_at + datetime.timedelta(days=duration_days)
    
    temp_keys_col.insert_one({
        "key": key,
        "plan": plan,
        "created_at": created_at,
        "expires_at": expires_at,
        "used": False,
        "duration_days": duration_days
    })
    
    return key

def is_valid_temp_key(key):
    """Verifica si una clave temporal es v√°lida"""
    now = datetime.datetime.now()
    key_data = temp_keys_col.find_one({
        "key": key,
        "used": False,
        "expires_at": {"$gt": now}
    })
    return bool(key_data)

def mark_key_used(key):
    """Marca una clave como usada"""
    temp_keys_col.update_one({"key": key}, {"$set": {"used": True}})

@app.on_message(filters.command("generatekey") & filters.user(admin_users))
async def generate_key_command(client, message):
    """Genera una nueva clave temporal para un plan espec√≠fico (solo admins)"""
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.reply("‚ö†Ô∏è Formato: /generatekey <plan> <d√≠as>\nEjemplo: /generatekey standard 7")
            return
            
        plan = parts[1].lower()
        valid_plans = ["standard", "pro", "premium"]
        if plan not in valid_plans:
            await message.reply(f"‚ö†Ô∏è Plan inv√°lido. Opciones v√°lidas: {', '.join(valid_plans)}")
            return
            
        try:
            duration_days = int(parts[2])
            if duration_days <= 0:
                await message.reply("‚ö†Ô∏è Los d√≠as deben ser un n√∫mero positivo")
                return
        except ValueError:
            await message.reply("‚ö†Ô∏è D√≠as debe ser un n√∫mero entero")
            return

        key = generate_temp_key(plan, duration_days)
        await message.reply(
            f"üîë **Clave {plan.capitalize()} generada**\n\n"
            f"Clave: `{key}`\n"
            f"V√°lida por: {duration_days} d√≠as\n\n"
            f"Comparte esta clave con el usuario usando:\n"
            f"`/access {key}`"
        )
    except Exception as e:
        logger.error(f"Error generando clave: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è Error al generar la clave")

@app.on_message(filters.command("listkeys") & filters.user(admin_users))
async def list_keys_command(client, message):
    """Lista todas las claves temporales activas (solo admins)"""
    try:
        now = datetime.datetime.now()
        keys = list(temp_keys_col.find({"used": False, "expires_at": {"$gt": now}}))
        
        if not keys:
            await message.reply("üì≠ **No hay claves activas.**")
            return
            
        response = "üîë **Claves temporales activas:**\n\n"
        for key in keys:
            expires_at = key["expires_at"]
            remaining = expires_at - now
            days = remaining.days
            hours = remaining.seconds // 3600
            minutes = (remaining.seconds % 3600) // 60
            
            response += (
                f"‚Ä¢ `{key['key']}`\n"
                f"  ‚Ü≥ Plan: {key['plan'].capitalize()}\n"
                f"  ‚Ü≥ Duraci√≥n: {key['duration_days']} d√≠as\n"
                f"  ‚è± Expira en: {days}d {hours}h {minutes}m\n\n"
            )
            
        await message.reply(response)
    except Exception as e:
        logger.error(f"Error listando claves: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è Error al listar claves")

# ======================== SISTEMA DE PLANES ======================== #

PLAN_LIMITS = {
    "standard": 40,
    "pro": 90,
    "premium": 200
}

PLAN_DURATIONS = {
    "standard": "7 d√≠as",
    "pro": "15 d√≠as",
    "premium": "30 d√≠as"
}

async def get_user_plan(user_id: int) -> dict:
    """Obtiene el plan del usuario desde la base de datos"""
    user = users_col.find_one({"user_id": user_id})
    if user:
        update_data = {}
        if "used" not in user:
            update_data["used"] = 0
        if "last_used_date" not in user:
            update_data["last_used_date"] = None
        
        if update_data:
            users_col.update_one({"user_id": user_id}, {"$set": update_data})
            user.update(update_data)
        
        return user
    return None

async def increment_user_usage(user_id: int):
    """Incrementa el contador de uso del usuario"""
    user = await get_user_plan(user_id)
    if user:
        users_col.update_one({"user_id": user_id}, {"$inc": {"used": 1}})

async def reset_user_usage(user_id: int):
    """Resetea el contador de uso del usuario"""
    user = await get_user_plan(user_id)
    if user:
        users_col.update_one({"user_id": user_id}, {"$set": {"used": 0}})

async def set_user_plan(user_id: int, plan: str):
    """Establece el plan de un usuario y notifica"""
    if plan not in PLAN_LIMITS:
        return False
        
    user = await get_user_plan(user_id)
    if user:
        users_col.update_one({"user_id": user_id}, {"$set": {"plan": plan, "used": 0}})
    else:
        users_col.insert_one({
            "user_id": user_id,
            "plan": plan,
            "used": 0,
            "join_date": datetime.datetime.now()
        })
    
    # Notificar al usuario sobre su nuevo plan
    try:
        await send_protected_message(
            user_id,
            f"üéâ **¬°Se te ha asignado un nuevo plan!**\n\n"
            f"‚Ä¢ **Plan**: {plan.capitalize()}\n"
            f"‚Ä¢ **Duraci√≥n**: {PLAN_DURATIONS[plan]}\n"
            f"‚Ä¢ **Videos disponibles**: {PLAN_LIMITS[plan]}\n\n"
            f"¬°Disfruta de tus beneficios! üé¨"
        )
    except Exception as e:
        logger.error(f"Error notificando al usuario {user_id}: {e}")
    
    return True

async def check_user_limit(user_id: int) -> bool:
    """Verifica si el usuario ha alcanzado su l√≠mite de compresi√≥n"""
    user = await get_user_plan(user_id)
    if user is None:
        return True  # Usuario sin plan no puede comprimir
        
    used_count = user.get("used", 0)
    return used_count >= PLAN_LIMITS.get(user["plan"], 0)

async def get_plan_info(user_id: int) -> str:
    """Obtiene informaci√≥n del plan del usuario para mostrar"""
    user = await get_user_plan(user_id)
    if user is None:
        return "üîí **No tienes un plan activo.**\n\nPor favor, adquiere un plan para usar el bot."
    
    plan_name = user["plan"].capitalize()
    used = user.get("used", 0)
    limit = PLAN_LIMITS[user["plan"]]
    remaining = max(0, limit - used)
    
    percent = min(100, (used / limit) * 100) if limit > 0 else 0
    bar_length = 15
    filled = int(bar_length * percent / 100)
    bar = '‚¨¢' * filled + '‚¨°' * (bar_length - filled)
    
    return (
        f"‚ï≠‚ú†‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïÆ\n"
        f"‚î† **Plan actual**: {plan_name}\n"
        f"‚î† **Videos usados**: {used}/{limit}\n"
        f"‚î† **Restantes**: {remaining}\n"
        f"‚î† **Progreso**: [{bar}] {int(percent)}%\n"
        f"‚ï∞‚ú†‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïØ"
    )

# ======================== FUNCI√ìN PARA VERIFICAR V√çDEOS EN COLA ======================== #

async def has_pending_in_queue(user_id: int) -> bool:
    """Verifica si el usuario tiene videos pendientes en la cola"""
    count = pending_col.count_documents({"user_id": user_id})
    return count > 0

# ======================== FIN SISTEMA DE PLANES ======================== #

def sizeof_fmt(num, suffix="B"):
    """Formatea el tama√±o de bytes a formato legible"""
    for unit in ["", "K", "M", "G", "T", "P", "E", "Z"]:
        if abs(num) < 1024.0:
            return "%3.2f%s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.2f%s%s" % (num, "Yi", suffix)

def create_progress_bar(current, total, proceso, length=15):
    """Crea una barra de progreso visual"""
    if total == 0:
        total = 1
    percent = current / total
    filled = int(length * percent)
    bar = '‚¨¢' * filled + '‚¨°' * (length - filled)
    return (
        f'    ‚ï≠‚îÅ‚îÅ‚îÅ[ü§ñ**Compress Bot**]‚îÅ‚îÅ‚îÅ‚ïÆ\n'
        f'‚î† [{bar}] {round(percent * 100)}%\n'
        f'‚î† **Procesado**: {sizeof_fmt(current)}/{sizeof_fmt(total)}\n'
        f'‚î† **Estado**: __#{proceso}__'
    )

last_progress_update = {}

async def progress_callback(current, total, msg, proceso, start_time):
    """Callback para mostrar progreso de descarga/subida"""
    try:
        now = datetime.datetime.now()
        key = (msg.chat.id, msg.id)
        last_time = last_progress_update.get(key)

        if last_time and (now - last_time).total_seconds() < 5:
            return

        last_progress_update[key] = now

        elapsed = time.time() - start_time
        percentage = current / total
        speed = current / elapsed if elapsed > 0 else 0
        eta = (total - current) / speed if speed > 0 else 0

        progress_bar = create_progress_bar(current, total, proceso)
        try:
            await msg.edit(
                f"   {progress_bar}\n"
                f"‚î† **Velocidad** {sizeof_fmt(speed)}/s\n"
                f"‚î† **Tiempo restante:** {int(eta)}s\n‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ\n"
            )
        except MessageNotModified:
            pass
    except Exception as e:
        logger.error(f"Error en progress_callback: {e}", exc_info=True)

# ======================== FUNCIONALIDAD DE COLA CON PRIORIDAD ======================== #

async def process_compression_queue():
    while True:
        priority, timestamp, (client, message, wait_msg) = await compression_queue.get()
        try:
            start_msg = await wait_msg.edit("üóúÔ∏è**Iniciando compresi√≥n**üé¨")
            loop = asyncio.get_running_loop()
            await loop.run_in_executor(executor, threading_compress_video, client, message, start_msg)
        except Exception as e:
            logger.error(f"Error procesando video: {e}", exc_info=True)
            await app.send_message(message.chat.id, f"‚ö†Ô∏è Error al procesar el video: {str(e)}")
        finally:
            pending_col.delete_one({"video_id": message.video.file_id})
            compression_queue.task_done()

def threading_compress_video(client, message, start_msg):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(compress_video(client, message, start_msg))
    loop.close()

@app.on_message(filters.command(["deleteall"]) & filters.user(admin_users))
async def delete_all_pending(client, message):
    result = pending_col.delete_many({})
    await message.reply(f"üóëÔ∏è **Cola eliminada.**\n**Se eliminaron {result.deleted_count} elementos.**")

@app.on_message(filters.regex(r"^/del_(\d+)$") & filters.user(admin_users))
async def delete_one_from_pending(client, message):
    match = message.text.strip().split("_")
    if len(match) != 2 or not match[1].isdigit():
        await message.reply("‚ö†Ô∏è Formato inv√°lido. Usa `/del_1`, `/del_2`, etc.")
        return

    index = int(match[1]) - 1
    cola = list(pending_col.find().sort([("priority", 1), ("timestamp", 1)]))

    if index < 0 or index >= len(cola):
        await message.reply("‚ö†Ô∏è N√∫mero fuera de rango.")
        return

    eliminado = cola[index]
    pending_col.delete_one({"_id": eliminado["_id"]})

    file_name = eliminado.get("file_name", "¬ø?")
    user_id = eliminado["user_id"]
    tiempo = eliminado.get("timestamp")
    tiempo_str = tiempo.strftime("%Y-%m-%d %H:%M:%S") if tiempo else "¬ø?"

    await message.reply(
        f"‚úÖ Eliminado de la cola:\n"
        f"üìÅ {file_name}\nüë§ ID: `{user_id}`\n‚è∞ {tiempo_str}"
    )

async def show_queue(client, message):
    """Muestra la cola de compresi√≥n"""
    cola = list(pending_col.find().sort([("priority", 1), ("timestamp", 1)]))

    if not cola:
        await message.reply("üì≠ **La cola est√° vac√≠a.**")
        return

    priority_to_plan = {v: k for k, v in PLAN_PRIORITY.items()}

    respuesta = "üìã **Cola de Compresi√≥n Activa (Priorizada)**\n\n"
    for i, item in enumerate(cola, 1):
        user_id = item["user_id"]
        file_name = item.get("file_name", "¬ø?")
        tiempo = item.get("timestamp")
        tiempo_str = tiempo.strftime("%H:%M:%S") if tiempo else "¬ø?"
        
        priority = item.get("priority", 4)
        plan_name = priority_to_plan.get(priority, "Sin plan").capitalize()
        
        respuesta += f"{i}. üë§ ID: `{user_id}` | üìÅ {file_name} | ‚è∞ {tiempo_str} | üìã {plan_name}\n"

    await message.reply(respuesta)

@app.on_message(filters.command("cola") & filters.user(admin_users))
async def ver_cola_command(client, message):
    await show_queue(client, message)

@app.on_message(filters.command("auto") & filters.user(admin_users))
async def startup_command(_, message):
    global processing_task
    msg = await message.reply("üîÑ Iniciando procesamiento de la cola...")

    pending_col.update_many(
        {"priority": {"$exists": False}},
        {"$set": {"priority": 4}}
    )

    pendientes = pending_col.find().sort([("priority", 1), ("timestamp", 1)])
    for item in pendientes:
        try:
            user_id = item["user_id"]
            chat_id = item["chat_id"]
            message_id = item["message_id"]
            priority = item.get("priority", 4)
            timestamp = item["timestamp"]
            
            message = await app.get_messages(chat_id, message_id)
            wait_msg = await app.send_message(chat_id, f"üîÑ Recuperado desde cola persistente.")
            
            await compression_queue.put((priority, timestamp, (app, message, wait_msg)))
        except Exception as e:
            logger.error(f"Error cargando pendiente: {e}")

    if processing_task is None or processing_task.done():
        processing_task = asyncio.create_task(process_compression_queue())
    await msg.edit("‚úÖ Procesamiento de cola iniciado.")

# ======================== FIN FUNCIONALIDAD DE COLA ======================== #

def update_video_settings(command: str):
    try:
        settings = command.split()
        for setting in settings:
            key, value = setting.split('=')
            video_settings[key] = value
        logger.info(f"‚öôÔ∏èConfiguraci√≥n actualizada‚öôÔ∏è: {video_settings}")
    except Exception as e:
        logger.error(f"Error actualizando configuraci√≥n: {e}", exc_info=True)

def create_compression_bar(percent, bar_length=10):
    try:
        percent = max(0, min(100, percent))
        filled_length = int(bar_length * percent / 100)
        bar = '‚¨¢' * filled_length + '‚¨°' * (bar_length - filled_length)
        return f"[{bar}] {int(percent)}%"
    except Exception as e:
        logger.error(f"Error creando barra de progreso: {e}", exc_info=True)
        return f"**Progreso**: {int(percent)}%"

async def compress_video(client, message: Message, start_msg):
    try:
        if not message.video:
            await app.send_message(chat_id=message.chat.id, text="Por favor env√≠a un v√≠deo v√°lido")
            return

        logger.info(f"Iniciando compresi√≥n para chat_id: {message.chat.id}, video: {message.video.file_name}")

        # Registrar compresi√≥n activa
        await add_active_compression(message.from_user.id, message.video.file_id)

        msg = await app.send_message(
            chat_id=message.chat.id,
            text="‚ï≠‚ú†‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïÆ\n   ‚î†üóúÔ∏èùóóùó≤ùòÄùó∞ùóÆùóøùó¥ùóÆùóªùó±ùóº ùó©ùó∂ùó±ùó≤ùóºüé¨\n‚ï∞‚ú†‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïØ"
        )
        
        try:
            start_download_time = time.time()
            original_video_path = await app.download_media(
                message.video,
                progress=progress_callback,
                progress_args=(msg, "DESCARGA", start_download_time)
            )
            logger.info(f"Video descargado: {original_video_path}")
        except Exception as e:
            logger.error(f"Error en descarga: {e}", exc_info=True)
            await msg.edit(f"Error en descarga: {e}")
            await remove_active_compression(message.from_user.id)
            return
        
        original_size = os.path.getsize(original_video_path)
        logger.info(f"Tama√±o original: {original_size} bytes")
        await notify_group(client, message, original_size, status="start")
        
        try:
            probe = ffmpeg.probe(original_video_path)
            dur_total = float(probe['format']['duration'])
            logger.info(f"Duraci√≥n del video: {dur_total} segundos")
        except Exception as e:
            logger.error(f"Error obteniendo duraci√≥n: {e}", exc_info=True)
            dur_total = 0

        await msg.edit(f"üóúÔ∏è**INICIANDO COMPRESI√ìN..**üì•\n"
                      f"üì¶ Tama√±o original: {original_size // (1024 * 1024)} MB")
        
        compressed_video_path = f"{os.path.splitext(original_video_path)[0]}_compressed.mp4"
        logger.info(f"Ruta de compresi√≥n: {compressed_video_path}")
        
        progress_message = "‚ï≠‚ú†‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïÆ\n‚î†üóúÔ∏èùóñùóºùó∫ùóΩùóøùó∂ùó∫ùó∂ùó≤ùóªùó±ùóº ùó©ùó∂ùó±ùó≤ùóºüé¨\n‚ï∞‚ú†‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïØ\n\n"
        await msg.edit(f"{progress_message}Preparando compresi√≥n...")

        drawtext_filter = f"drawtext=text='@InfiniteNetwork_KG':x=w-tw-10:y=10:fontsize=20:fontcolor=white"

        ffmpeg_command = [
            'ffmpeg', '-y', '-i', original_video_path,
            '-vf', f"scale={video_settings['resolution']},{drawtext_filter}",
            '-crf', video_settings['crf'],
            '-b:a', video_settings['audio_bitrate'],
            '-r', video_settings['fps'],
            '-preset', video_settings['preset'],
            '-c:v', video_settings['codec'],
            compressed_video_path
        ]
        logger.info(f"Comando FFmpeg: {' '.join(ffmpeg_command)}")

        try:
            start_time = datetime.datetime.now()
            process = subprocess.Popen(ffmpeg_command, stderr=subprocess.PIPE, text=True, bufsize=1)

            progress_message = "‚ï≠‚ú†‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïÆ\n‚î†üóúÔ∏èùóñùóºùó∫ùó∫ùóΩùóøùó∂ùó∫ùó∂ùó≤ùóªùó±ùóº ùó©ùó∂ùó±ùó≤ùóºüé¨\n‚ï∞‚ú†‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïØ\n\n"
            last_percent = 0
            last_update_time = 0
            time_pattern = re.compile(r"time=(\d+:\d+:\d+\.\d+)")
            
            while True:
                line = process.stderr.readline()
                if not line and process.poll() is not None:
                    break
                if line:
                    match = time_pattern.search(line)
                    if match and dur_total > 0:
                        time_str = match.group(1)
                        h, m, s = time_str.split(':')
                        current_time = int(h)*3600 + int(m)*60 + float(s)
                        percent = min(100, (current_time / dur_total) * 100)
                        
                        if percent - last_percent >= 5:
                            bar = create_compression_bar(percent)
                            try:
                                await msg.edit(f"{progress_message}**Progreso**: {bar}")
                            except MessageNotModified:
                                pass
                            last_percent = percent
                            last_update_time = time.time()

            compressed_size = os.path.getsize(compressed_video_path)
            logger.info(f"Compresi√≥n completada. Tama√±o comprimido: {compressed_size} bytes")
            
            try:
                probe = ffmpeg.probe(compressed_video_path)
                duration = int(float(probe.get('format', {}).get('duration', 0)))
                if duration == 0:
                    for stream in probe.get('streams', []):
                        if 'duration' in stream:
                            duration = int(float(stream['duration']))
                            break
                if duration == 0:
                    duration = 0
                logger.info(f"Duraci√≥n del video comprimido: {duration} segundos")
            except Exception as e:
                logger.error(f"Error obteniendo duraci√≥n comprimido: {e}", exc_info=True)
                duration = 0

            thumbnail_path = f"{compressed_video_path}_thumb.jpg"
            try:
                (
                    ffmpeg
                    .input(compressed_video_path, ss=duration//2 if duration > 0 else 0)
                    .filter('scale', 320, -1)
                    .output(thumbnail_path, vframes=1)
                    .overwrite_output()
                    .run(capture_stdout=True, capture_stderr=True)
                )
                logger.info(f"Miniatura generada: {thumbnail_path}")
            except Exception as e:
                logger.error(f"Error generando miniatura: {e}", exc_info=True)
                thumbnail_path = None

            processing_time = datetime.datetime.now() - start_time
            processing_time_str = str(processing_time).split('.')[0]
            
            description = (
                "‚ï≠‚ú†‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïÆ\n"
                f"‚î†ùóßùó∂ùó≤ùó∫ùóΩùóº ùó±ùó≤ ùóΩùóøùóºùó∞ùó≤ùòÄùóÆùó∫ùó∂ùó≤ùóªùòÅùóº: {processing_time_str}\n"
                "‚ï∞‚ú†‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïØ\n"
                "‚ï≠‚ú†‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïÆ\n"
                f"‚î†‚öôÔ∏èùóñùóºùóªùó≥ùó∂ùó¥ùòÇùóøùóÆùó∞ùó∂ùóºùóª ùòÇùòÄùóÆùó±ùóÆ‚öôÔ∏è\n"
                f"‚î†**Resoluci√≥n**:  {video_settings['resolution']}\n‚î†**CRF**: {video_settings['crf']} | **FPS**: {video_settings['fps']}\n"
                f"‚ï∞‚ú†‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïØ\n"
            )
            
            try:
                start_upload_time = time.time()
                upload_msg = await app.send_message(chat_id=message.chat.id, text="‚è´ **Subiendo video comprimido** üì§")
                
                if thumbnail_path and os.path.exists(thumbnail_path):
                    await send_protected_video(
                        chat_id=message.chat.id,
                        video=compressed_video_path,
                        caption=description,
                        thumb=thumbnail_path,
                        duration=duration,
                        reply_to_message_id=message.id,
                        progress=progress_callback,
                        progress_args=(upload_msg, "SUBIDA", start_upload_time)
                    )
                else:
                    await send_protected_video(
                        chat_id=message.chat.id,
                        video=compressed_video_path,
                        caption=description,
                        duration=duration,
                        reply_to_message_id=message.id,
                        progress=progress_callback,
                        progress_args=(upload_msg, "SUBIDA", start_upload_time)
                    )
                
                await upload_msg.delete()
                logger.info("‚úÖ Video comprimido enviado como respuesta al original")
                await notify_group(client, message, original_size, compressed_size=compressed_size, status="done")
                await increment_user_usage(message.from_user.id)

                try:
                    await start_msg.delete()
                    logger.info("Mensaje 'Iniciando compresi√≥n' eliminado")
                except Exception as e:
                    logger.error(f"Error eliminando mensaje de inicio: {e}")

                try:
                    await msg.delete()
                    logger.info("Mensaje de progreso eliminado")
                except Exception as e:
                    logger.error(f"Error eliminando mensaje de progreso: {e}")

            except Exception as e:
                logger.error(f"Error enviando video: {e}", exc_info=True)
                await app.send_message(chat_id=message.chat.id, text="‚ö†Ô∏è **Error al enviar el video comprimido**")
                
        except Exception as e:
            logger.error(f"Error en compresi√≥n: {e}", exc_info=True)
            await msg.delete()
            await app.send_message(chat_id=message.chat.id, text=f"Ocurri√≥ un error al comprimir el video: {e}")
        finally:
            try:
                for file_path in [original_video_path, compressed_video_path]:
                    if file_path and os.path.exists(file_path):
                        os.remove(file_path)
                        logger.info(f"Archivo temporal eliminado: {file_path}")
                if 'thumbnail_path' in locals() and thumbnail_path and os.path.exists(thumbnail_path):
                    os.remove(thumbnail_path)
                    logger.info(f"Miniatura eliminada: {thumbnail_path}")
            except Exception as e:
                logger.error(f"Error eliminando archivos temporales: {e}", exc_info=True)
    except Exception as e:
        logger.critical(f"Error cr√≠tico en compress_video: {e}", exc_info=True)
        await app.send_message(chat_id=message.chat.id, text="‚ö†Ô∏è Ocurri√≥ un error cr√≠tico al procesar el video")
    finally:
        await remove_active_compression(message.from_user.id)

# ======================== INTERFAZ DE USUARIO ======================== #

# Teclado principal
def get_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚öôÔ∏è Settings"), KeyboardButton("üìã Planes")],
            [KeyboardButton("üìä Mi Plan"), KeyboardButton("‚ÑπÔ∏è Ayuda")],
            [KeyboardButton("üëÄ Ver Cola")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

@app.on_message(filters.command("settings") & filters.private)
async def settings_menu(client, message):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üóúÔ∏èCompresi√≥n Generalüîß", callback_data="general")],
        [InlineKeyboardButton("üì± Reels y Videos cortos", callback_data="reels")],
        [InlineKeyboardButton("üì∫ Shows/Reality", callback_data="show")],
        [InlineKeyboardButton("üé¨ Anime y series animadas", callback_data="anime")]
    ])

    await send_protected_message(
        message.chat.id, 
        "‚öôÔ∏èùó¶ùó≤ùóπùó≤ùó∞ùó∞ùó∂ùóºùóªùóÆùóø ùóñùóÆùóπùó∂ùó±ùóÆùó±‚öôÔ∏è", 
        reply_markup=keyboard
    )

# ======================== COMANDOS DE PLANES ======================== #

def get_plan_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üß© Est√°ndar", callback_data="plan_standard")],
        [InlineKeyboardButton("üíé Pro", callback_data="plan_pro")],
        [InlineKeyboardButton("üëë Premium", callback_data="plan_premium")]
    ])

async def get_plan_menu(user_id: int):
    user = await get_user_plan(user_id)
    
    if user is None:
        return (
            "üîí **No tienes un plan activo.**\n\n"
            "Por favor, adquiere un plan para usar el bot.\n\n"
            "üìã **Selecciona un plan para m√°s informaci√≥n:**"
        ), get_plan_menu_keyboard()
    
    plan_name = user["plan"].capitalize()
    used = user.get("used", 0)
    limit = PLAN_LIMITS[user["plan"]]
    remaining = max(0, limit - used)
    
    return (
        f"‚ï≠‚ú†‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïÆ\n"
        f"‚î† **Tu plan actual**: {plan_name}\n"
        f"‚î† **Videos usados**: {used}/{limit}\n"
        f"‚î† **Restantes**: {remaining}\n"
        f"‚ï∞‚ú†‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú†‚ïØ\n\n"
        "üìã **Selecciona un plan para m√°s informaci√≥n:**"
    ), get_plan_menu_keyboard()

@app.on_message(filters.command("planes") & filters.private)
async def planes_command(client, message):
    try:
        texto, keyboard = await get_plan_menu(message.from_user.id)
        await send_protected_message(
            message.chat.id, 
            texto, 
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error en planes_command: {e}", exc_info=True)
        await send_protected_message(
            message.chat.id, 
            "‚ö†Ô∏è Error al mostrar los planes"
        )

# ======================== MANEJADOR DE CALLBACKS ======================== #

@app.on_callback_query()
async def callback_handler(client, callback_query: CallbackQuery):
    config_map = {
        "general": "resolution=854x480 crf=28 audio_bitrate=70k fps=22 preset=veryfast codec=libx264",
        "reels": "resolution=420x720 crf=25 audio_bitrate=70k fps=30 preset=veryfast codec=libx264",
        "show": "resolution=854x480 crf=32 audio_bitrate=70k fps=20 preset=veryfast codec=libx264",
        "anime": "resolution=854x480 crf=32 audio_bitrate=64k fps=18 preset=veryfast codec=libx264"
    }

    quality_names = {
        "general": "üóúÔ∏èCompresi√≥n Generalüîß",
        "reels": "üì± Reels y Videos cortos",
        "show": "üì∫ Shows/Reality",
        "anime": "üé¨ Anime y series animadas"
    }

    # Manejar confirmaciones de compresi√≥n
    if callback_query.data.startswith(("confirm_", "cancel_")):
        action, confirmation_id_str = callback_query.data.split('_', 1)
        confirmation_id = ObjectId(confirmation_id_str)
        
        confirmation = await get_confirmation(confirmation_id)
        if not confirmation:
            await callback_query.answer("‚ö†Ô∏è Esta solicitud ha expirado o ya fue procesada.", show_alert=True)
            return
            
        user_id = callback_query.from_user.id
        if user_id != confirmation["user_id"]:
            await callback_query.answer("‚ö†Ô∏è No tienes permiso para esta acci√≥n.", show_alert=True)
            return

        if action == "confirm":
            # Verificar l√≠mite nuevamente
            if await check_user_limit(user_id):
                await callback_query.answer("‚ö†Ô∏è Has alcanzado tu l√≠mite mensual de compresiones.", show_alert=True)
                await delete_confirmation(confirmation_id)
                return

            # Verificar si ya hay una compresi√≥n activa o en cola
            if await has_active_compression(user_id) or await has_pending_in_queue(user_id):
                await callback_query.answer("‚ö†Ô∏è Ya hay un video en proceso o en cola.\nEspera a que termine.", show_alert=True)
                await delete_confirmation(confirmation_id)
                return

            try:
                message = await app.get_messages(confirmation["chat_id"], confirmation["message_id"])
            except Exception as e:
                logger.error(f"Error obteniendo mensaje: {e}")
                await callback_query.answer("‚ö†Ô∏è Error al obtener el video. Intenta enviarlo de nuevo.", show_alert=True)
                await delete_confirmation(confirmation_id)
                return

            await delete_confirmation(confirmation_id)
            
            # Editar mensaje de confirmaci√≥n para mostrar estado
            queue_size = compression_queue.qsize()
            wait_msg = await callback_query.message.edit_text(
                f"‚è≥ Tu video ha sido a√±adido a la cola.\n\n"
                f"üìã Tama√±o actual de la cola: {queue_size}\n\n"
                f"‚Ä¢ **Espere que otros procesos terminen** ‚è≥"
            )

            # Obtener prioridad y encolar
            priority = await get_user_priority(user_id)
            timestamp = datetime.datetime.now()
            
            global processing_task
            if processing_task is None or processing_task.done():
                processing_task = asyncio.create_task(process_compression_queue())
            
            pending_col.insert_one({
                "user_id": user_id,
                "video_id": message.video.file_id,
                "file_name": message.video.file_name,
                "chat_id": message.chat.id,
                "message_id": message.id,
                "timestamp": timestamp,
                "priority": priority
            })
            
            await compression_queue.put((priority, timestamp, (app, message, wait_msg)))
            logger.info(f"Video confirmado y encolado de {user_id}: {message.video.file_name}")

        elif action == "cancel":
            await delete_confirmation(confirmation_id)
            await callback_query.answer("‚ùå Compresi√≥n cancelada.", show_alert=True)
            try:
                await callback_query.message.edit_text("‚ùå **Compresi√≥n cancelada.**")
            except:
                pass
        return

    # Resto de callbacks (planes, configuraciones, etc.)
    if callback_query.data == "plan_back":
        try:
            texto, keyboard = await get_plan_menu(callback_query.from_user.id)
            await callback_query.message.edit_text(texto, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"Error en plan_back: {e}", exc_info=True)
            await callback_query.answer("‚ö†Ô∏è Error al volver al men√∫ de planes", show_alert=True)
        return

    if callback_query.data.startswith("plan_"):
        plan_type = callback_query.data.split("_")[1]
        user_id = callback_query.from_user.id
        
        back_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô Volver", callback_data="plan_back")]
        ])
        
        if plan_type == "standard":
            await callback_query.message.edit_text(
                "üß©**Plan Est√°ndar**üß©\n\n"
                "‚úÖ Beneficios:\n"
                "‚Ä¢ Hasta 40 videos comprimidos\n"
                "‚ùå Desventajas:\n‚Ä¢ Prioridad media en la cola de procesamiento\n‚Ä¢ No podr√° reenviar del bot ‚ùå\n\n‚Ä¢ **Precio:** **180Cup**üíµ (antes 200Cup)\n**‚Ä¢ Duraci√≥n 7 dias**\n\n"
                "üë®‚Äçüíª **Para acceder a este plan contacta con @InfiniteNetworkAdmin**",
                reply_markup=back_keyboard
            )
            
        elif plan_type == "pro":
            await callback_query.message.edit_text(
                "üíé**Plan Pro**üíé\n\n"
                "‚úÖ Beneficios:\n"
                "‚Ä¢ Hasta 90 videos comprimidos\n"
                "‚Ä¢ Prioridad alta en la cola de procesamiento\n‚Ä¢ Podr√° reenviar del bot‚òëÔ∏è\n\n‚Ä¢ **Precio:** **400Cup**üíµ (antes 450Cup)\n**‚Ä¢ Duraci√≥n 15 dias**\n\n"
                "üë®‚Äçüíª **Para acceder a este plan contacta con @InfiniteNetworkAdmin**",
                reply_markup=back_keyboard
            )
            
        elif plan_type == "premium":
            await callback_query.message.edit_text(
                "üëë**Plan Premium**üëë\n\n"
                "‚úÖ Beneficios:\n"
                "‚Ä¢ Hasta 200 videos comprimidos\n"
                "‚Ä¢ M√°xima prioridad en procesamiento\n"
                "‚Ä¢ Soporte prioritario 24/7\n‚Ä¢ Podr√° reenviar del bot‚òëÔ∏è\n\n‚Ä¢ **Precio:** **850Cup** (antes 950Cup)üíµ\n**‚Ä¢ Duraci√≥n 30 dias**\n\n"
                "üë®‚Äçüíª **Para acceder a este plan contacta con @InfiniteNetworkAdmin**",
                reply_markup=back_keyboard
            )
        return
    
    config = config_map.get(callback_query.data)

    if config:
        update_video_settings(config)
        back_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô Volver", callback_data="back_to_settings")]
        ])
        
        quality_name = quality_names.get(callback_query.data, "Calidad Desconocida")
        
        await callback_query.message.edit_text(
            f"**{quality_name}\naplicada correctamente**‚úÖ",
            reply_markup=back_keyboard
        )
    elif callback_query.data == "back_to_settings":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üóúÔ∏èCompresi√≥n Generalüîß", callback_data="general")],
            [InlineKeyboardButton("üì± Reels y Videos cortos", callback_data="reels")],
            [InlineKeyboardButton("üì∫ Shows/Reality", callback_data="show")],
            [InlineKeyboardButton("üé¨ Anime y series animadas", callback_data="anime")]
        ])
        await callback_query.message.edit_text(
            " ‚öôÔ∏èùó¶ùó≤ùóπùó≤ùó∞ùó∞ùó∂ùóºùóªùóÆùóø ùóñùóÆùóπùó∂ùó±ùóÆùó±‚öôÔ∏è",
            reply_markup=keyboard
        )
    else:
        await callback_query.answer("Opci√≥n inv√°lida.", show_alert=True)

# ======================== MANEJADOR DE START CON MEN√ö ======================== #

@app.on_message(filters.command("start"))
async def start_command(client, message):
    try:
        user_id = message.from_user.id
        
        # Verificar si el usuario est√° baneado
        if user_id in ban_users:
            logger.warning(f"Usuario baneado intent√≥ usar /start: {user_id}")
            return

        # Verificar si el usuario tiene un plan (est√° registrado)
        user_plan = await get_user_plan(user_id)
        if user_plan is None:
            # Usuario sin plan: mostrar mensaje de acceso denegado
            await send_protected_message(
                message.chat.id,
                "‚ùå **Usted no tiene acceso para usar este bot.**\n\n"
                "üì¶Para ver los planes disponibles usa el comando /planes\n\n"
                "üë®üèª‚ÄçüíªPara m√°s informaci√≥n, contacte a @InfiniteNetworkAdmin."
            )
            return

        # Usuario con plan: mostrar men√∫ normal
        # Ruta de la imagen del logo
        image_path = "logo.jpg"
        
        caption = (
            "**ü§ñ Bot para comprimir videos**\n"
            "**Creado por** @InfiniteNetworkAdmin\n\n"
            "**¬°Bienvenido!** Usa los botones del men√∫ para interactuar conmigo:\n"
            "‚Ä¢ ‚öôÔ∏è Settings: Configura calidad de compresi√≥n\n"
            "‚Ä¢ üìã Planes: Ver opciones de planes disponibles\n"
            "‚Ä¢ üìä Mi Plan: Ver tu plan actual\n"
            "‚Ä¢ ‚ÑπÔ∏è Ayuda: Obtener informaci√≥n de uso\n"
            "‚Ä¢ üëÄ Ver Cola: Ver estado de la cola de compresi√≥n\n\n" 
            "**‚öôÔ∏è Versi√≥n 8.5.0 ‚öôÔ∏è**"
        )
        
        # Enviar la foto con el caption
        await send_protected_photo(
            chat_id=message.chat.id,
            photo=image_path,
            caption=caption,
            reply_markup=get_main_menu_keyboard()
        )
        logger.info(f"Comando /start ejecutado por {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error en handle_start: {e}", exc_info=True)

# ======================== MANEJADOR DE MEN√ö PRINCIPAL ======================== #

@app.on_message(filters.text & filters.private)
async def main_menu_handler(client, message):
    try:
        text = message.text.lower()
        user_id = message.from_user.id

        if user_id in ban_users:
            return
            
        if text == "‚öôÔ∏è settings":
            await settings_menu(client, message)
        elif text == "üìã planes":
            await planes_command(client, message)
        elif text == "üìä mi plan":
            await my_plan_command(client, message)
        elif text == "‚ÑπÔ∏è ayuda":
            await send_protected_message(
                message.chat.id,
                "üë®üèª‚Äçüíª **Informaci√≥n**\n\n"
                "‚Ä¢ Configurar calidad: Usa el bot√≥n ‚öôÔ∏è Settings\n"
                "‚Ä¢ Para comprimir un video: Env√≠alo directamente al bot\n"
                "‚Ä¢ Ver planes: Usa el bot√≥n üìã Planes\n"
                "‚Ä¢ Ver tu estado: Usa el bot√≥n üìä Mi Plan\n"
                "‚Ä¢ Usa /start para iniciar en el bot nuevamente\n"
                "‚Ä¢ Ver cola de compresi√≥n: Usa el bot√≥n üëÄ Ver Cola\n\n"
                "üì© **Soporte**: @InfiniteNetworkAdmin"
            )
        elif text == "üëÄ ver cola":
            await queue_command(client, message)
        else:
            # Manejar otros comandos de texto existentes
            await handle_message(client, message)
            
    except Exception as e:
        logger.error(f"Error en main_menu_handler: {e}", exc_info=True)

# ======================== NUEVO COMANDO PARA DESBANEAR USUARIOS ======================== #

@app.on_message(filters.command("desuser") & filters.user(admin_users))
async def unban_user_command(client, message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.reply("Formato: /desuser <user_id>")
            return

        user_id = int(parts[1])
        
        if user_id in ban_users:
            ban_users.remove(user_id)
            
        result = banned_col.delete_one({"user_id": user_id})
        
        if result.deleted_count > 0:
            await message.reply(f"‚úÖ Usuario {user_id} desbaneado exitosamente.")
        else:
            await message.reply(f"‚ÑπÔ∏è El usuario {user_id} no estaba baneado.")
            
        logger.info(f"Usuario desbaneado: {user_id} por admin {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error en unban_user_command: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è Error al desbanear usuario. Formato: /desuser [user_id]")

# ======================== COMANDO PARA ELIMINAR USUARIOS ======================== #
@app.on_message(filters.command(["banuser", "deluser"]) & filters.user(admin_users))
async def ban_or_delete_user_command(client, message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.reply("Formato: /comando <user_id>")
            return

        ban_user_id = int(parts[1])

        if ban_user_id in admin_users:
            await message.reply("üîí No puedes banear a un administrador.")
            return

        result = users_col.delete_one({"user_id": ban_user_id})

        if ban_user_id not in ban_users:
            ban_users.append(ban_user_id)
            
        banned_col.insert_one({
            "user_id": ban_user_id,
            "banned_at": datetime.datetime.now()
        })

        await message.reply(
            f"üîí Usuario {ban_user_id} baneado y eliminado de la base de datos."
            if result.deleted_count > 0 else
            f"üîí Usuario {ban_user_id} baneado (no estaba en la base de datos)."
        )
    except Exception as e:
        logger.error(f"Error en ban_or_delete_user_command: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è Error en el comando")

# ======================== ACCESO CON CLAVES PARA PLANES PAGOS ======================== #

@app.on_message(filters.command("access") & filters.private)
async def access_command(client, message):
    try:
        user_id = message.from_user.id
        
        if user_id in ban_users:
            await send_protected_message(message.chat.id, "üîí Tu acceso ha sido revocado.")
            return
            
        logger.info(f"Comando access recibido de {user_id}")
        
        if len(message.command) < 2:
            await send_protected_message(message.chat.id, "‚ö†Ô∏è Formato: /access <clave>")
            return

        key = message.command[1]

        now = datetime.datetime.now()
        key_data = temp_keys_col.find_one({
            "key": key,
            "used": False,
            "expires_at": {"$gt": now}
        })

        if key_data:
            temp_keys_col.update_one({"_id": key_data["_id"]}, {"$set": {"used": True}})
            new_plan = key_data["plan"]
            await set_user_plan(user_id, new_plan)
            
            await send_protected_message(
                message.chat.id,
                f"‚úÖ **Plan {new_plan.capitalize()} activado!**\n"
                f"V√°lido por {key_data['duration_days']} d√≠as\n\n"
                f"Ahora tienes {PLAN_LIMITS[new_plan]} videos disponibles"
            )
            logger.info(f"Plan actualizado a {new_plan} para {user_id} con clave {key}")
        else:
            await send_protected_message(message.chat.id, "‚ö†Ô∏è **Clave inv√°lida o expirada**")
    except Exception as e:
        logger.error(f"Error en access_command: {e}", exc_info=True)
        await send_protected_message(message.chat.id, "‚ö†Ô∏è **Error al procesar la solicitud de acceso**")

sent_messages = {}

def is_bot_public():
    return BOT_IS_PUBLIC and BOT_IS_PUBLIC.lower() == "true"

# ======================== COMANDOS DE PLANES ======================== #

@app.on_message(filters.command("myplan") & filters.private)
async def my_plan_command(client, message):
    try:
        plan_info = await get_plan_info(message.from_user.id)
        await send_protected_message(
            message.chat.id, 
            plan_info,
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"Error en my_plan_command: {e}", exc_info=True)
        await send_protected_message(
            message.chat.id, 
            "‚ö†Ô∏è **Error al obtener informaci√≥n de tu plan**",
            reply_markup=get_main_menu_keyboard()
        )

@app.on_message(filters.command("setplan") & filters.user(admin_users))
async def set_plan_command(client, message):
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.reply("Formato: /setplan <user_id> <plan>")
            return
        
        user_id = int(parts[1])
        plan = parts[2].lower()
        
        if plan not in PLAN_LIMITS:
            await message.reply(f"‚ö†Ô∏è Plan inv√°lido. Opciones v√°lidas: {', '.join(PLAN_LIMITS.keys())}")
            return
        
        if await set_user_plan(user_id, plan):
            await message.reply(f"‚úÖ **Plan del usuario {user_id} actualizado a {plan}.**")
        else:
            await message.reply("‚ö†Ô∏è **Error al actualizar el plan.**")
    except Exception as e:
        logger.error(f"Error en set_plan_command: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è **Error en el comando**")

@app.on_message(filters.command("resetuser") & filters.user(admin_users))
async def reset_user_command(client, message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.reply("Formato: /resetuser <user_id>")
            return
        
        user_id = int(parts[1])
        await reset_user_usage(user_id)
        await message.reply(f"‚úÖ **Contador de videos del usuario {user_id} reiniciado a 0.**")
    except Exception as e:
        logger.error(f"Error en reset_user_command: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è Error en el comando")

@app.on_message(filters.command("userinfo") & filters.user(admin_users))
async def user_info_command(client, message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.reply("Formato: /userinfo <user_id>")
            return
        
        user_id = int(parts[1])
        user = await get_user_plan(user_id)
        if user:
            plan = user["plan"].capitalize()
            used = user.get("used", 0)
            limit = PLAN_LIMITS[user["plan"]]
            join_date = user.get("join_date", "Desconocido")
            if isinstance(join_date, datetime.datetime):
                join_date = join_date.strftime("%Y-%m-%d %H:%M:%S")
            
            await message.reply(
                f"üë§ **ID**: `{user_id}`\n"
                f"üìù **Plan**: {plan}\n"
                f"üî¢ **Videos comprimidos**: {used}/{limit}\n"
                f"üìÖ **Fecha de registro**: {join_date}"
            )
        else:
            await message.reply("‚ö†Ô∏è Usuario no registrado o sin plan")
    except Exception as e:
        logger.error(f"Error en user_info_command: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è Error en el comando")

# ======================== NUEVO COMANDO RESTUSER ======================== #

@app.on_message(filters.command("restuser") & filters.user(admin_users))
async def reset_all_users_command(client, message):
    try:
        result = users_col.delete_many({})
        
        await message.reply(
            f"‚ôªÔ∏è **Todos los usuarios han sido eliminados**\n"
            f"üóëÔ∏è Usuarios eliminados: {result.deleted_count}\n"
            f"üî¢ Contadores de v√≠deos restablecidos a 0"
        )
        logger.info(f"Todos los usuarios eliminados por admin {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error en reset_all_users_command: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è Error al eliminar usuarios")

# ======================== NUEVOS COMANDOS DE ADMINISTRACI√ìN ======================== #

@app.on_message(filters.command("user") & filters.user(admin_users))
async def list_users_command(client, message):
    try:
        all_users = list(users_col.find({}))
        
        if not all_users:
            await message.reply("üì≠ **No hay usuarios registrados.**")
            return

        response = "üë• **Lista de Usuarios Registrados**\n\n"
        for i, user in enumerate(all_users, 1):
            user_id = user["user_id"]
            plan = user["plan"].capitalize()
            
            try:
                user_info = await app.get_users(user_id)
                username = f"@{user_info.username}" if user_info.username else "Sin username"
            except:
                username = "Sin username"
                
            response += f"{i}. {username}\n   üë§ ID: `{user_id}`\n   üìù Plan: {plan}\n\n"

        await message.reply(response)
    except Exception as e:
        logger.error(f"Error en list_users_command: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è **Error al listar usuarios**")

@app.on_message(filters.command("admin") & filters.user(admin_users))
async def admin_stats_command(client, message):
    try:
        pipeline = [
            {"$match": {"plan": {"$exists": True, "$ne": None}}},
            {"$group": {
                "_id": "$plan",
                "count": {"$sum": 1},
                "total_used": {"$sum": "$used"}
            }}
        ]
        stats = list(users_col.aggregate(pipeline))
        
        total_users = users_col.count_documents({})
        total_compressions = users_col.aggregate([
            {"$group": {"_id": None, "total": {"$sum": "$used"}}}
        ])
        total_compressions = next(total_compressions, {}).get("total", 0)
        
        response = "üìä **Estad√≠sticas de Administrador**\n\n"
        response += f"üë• **Total de usuarios:** {total_users}\n"
        response += f"üî¢ **Total de compresiones:** {total_compressions}\n\n"
        response += "üìù **Distribuci√≥n por Planes:**\n"
        
        plan_names = {
            "standard": "üß© Est√°ndar",
            "pro": "üíé Pro",
            "premium": "üëë Premium"
        }
        
        for stat in stats:
            plan_type = stat["_id"]
            count = stat["count"]
            used = stat["total_used"]
            plan_name = plan_names.get(
                plan_type, 
                plan_type.capitalize() if plan_type else "‚ùì Desconocido"
            )
            
            response += (
                f"\n{plan_name}:\n"
                f"  üë• Usuarios: {count}\n"
                f"  üî¢ Comprs: {used}\n"
            )
        
        await message.reply(response)
    except Exception as e:
        logger.error(f"Error en admin_stats_command: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è **Error al generar estad√≠sticas**")

# ======================== NUEVO COMANDO BROADCAST ======================== #

async def broadcast_message(admin_id: int, message_text: str):
    try:
        user_ids = set()
        
        for user in users_col.find({}, {"user_id": 1}):
            user_ids.add(user["user_id"])
        
        user_ids = [uid for uid in user_ids if uid not in ban_users]
        total_users = len(user_ids)
        
        if total_users == 0:
            await app.send_message(admin_id, "üì≠ No hay usuarios para enviar el mensaje.")
            return
        
        await app.send_message(
            admin_id,
            f"üì§ **Iniciando difusi√≥n a {total_users} usuarios...**\n"
            f"‚è± Esto puede tomar varios minutos."
        )
        
        success = 0
        failed = 0
        count = 0
        
        for user_id in user_ids:
            count += 1
            try:
                await send_protected_message(user_id, f"üì© **Mensaje del administrador:**\n\n{message_text}")
                success += 1
                await asyncio.sleep(0.5)
            except Exception as e:
                logger.error(f"Error enviando mensaje a {user_id}: {e}")
                failed += 1
                    
        await app.send_message(
            admin_id,
            f"‚úÖ **Difusi√≥n completada!**\n\n"
            f"üë• Total de usuarios: {total_users}\n"
            f"‚úÖ Enviados correctamente: {success}\n"
            f"‚ùå Fallidos: {failed}"
        )
    except Exception as e:
        logger.error(f"Error en broadcast_message: {e}", exc_info=True)
        await app.send_message(admin_id, f"‚ö†Ô∏è Error en difusi√≥n: {str(e)}")

@app.on_message(filters.command("msg") & filters.user(admin_users))
async def broadcast_command(client, message):
    try:
        # Verificar si el mensaje tiene texto
        if not message.text or len(message.text.split()) < 2:
            await message.reply("‚ö†Ô∏è Formato: /msg <mensaje>")
            return
            
        # Obtener el texto despu√©s del comando
        parts = message.text.split(maxsplit=1)
        broadcast_text = parts[1] if len(parts) > 1 else ""
        
        # Validar que haya texto para difundir
        if not broadcast_text.strip():
            await message.reply("‚ö†Ô∏è El mensaje no puede estar vac√≠o")
            return
            
        admin_id = message.from_user.id
        asyncio.create_task(broadcast_message(admin_id, broadcast_text))
        
        await message.reply(
            "üì§ **Difusi√≥n iniciada!**\n"
            "‚è± Los mensajes se enviar√°n progresivamente a todos los usuarios.\n"
            "Recibir√°s un reporte final cuando se complete."
        )
    except Exception as e:
        logger.error(f"Error en broadcast_command: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è Error al iniciar la difusi√≥n")

# ======================== NUEVO COMANDO PARA VER COLA ======================== #

async def queue_command(client, message):
    """Muestra informaci√≥n sobre la cola de compresi√≥n"""
    user_id = message.from_user.id
    user_plan = await get_user_plan(user_id)
    
    if user_plan is None:
        await send_protected_message(
            message.chat.id,
            "üîí **Usted no tiene acceso para usar este bot.**\n\n"
            "Por favor, adquiera un plan para poder ver la cola de compresi√≥n."
        )
        return
    
    # Para administradores: mostrar cola completa
    if user_id in admin_users:
        await show_queue(client, message)
        return
    
    # Para usuarios normales: mostrar informaci√≥n resumida
    total = pending_col.count_documents({})
    user_pending = list(pending_col.find({"user_id": user_id}))
    user_count = len(user_pending)
    
    if total == 0:
        response = "üì≠ **La cola de compresi√≥n est√° vac√≠a.**"
    else:
        # Encontrar la posici√≥n del primer video del usuario en la cola ordenada
        cola = list(pending_col.find().sort([("priority", 1), ("timestamp", 1)]))
        user_position = None
        for idx, item in enumerate(cola, 1):
            if item["user_id"] == user_id:
                user_position = idx
                break
        
        if user_count == 0:
            response = (
                f"üìã **Estado de la cola**\n\n"
                f"‚Ä¢ Total de videos en cola: {total}\n"
                f"‚Ä¢ Tus videos en cola: 0\n\n"
                f"No tienes videos pendientes de compresi√≥n."
            )
        else:
            response = (
                f"üìã **Estado de la cola**\n\n"
                f"‚Ä¢ Total de videos en cola: {total}\n"
                f"‚Ä¢ Tus videos en cola: {user_count}\n"
                f"‚Ä¢ Posici√≥n de tu primer video: {user_position}\n\n"
                f"‚è± Por favor ten paciencia mientras se procesa tu video."
            )
    
    await send_protected_message(message.chat.id, response)

# ======================== MANEJADORES PRINCIPALES ======================== #

# Manejador para v√≠deos recibidos
@app.on_message(filters.video)
async def handle_video(client, message: Message):
    try:
        user_id = message.from_user.id
        
        # Paso 1: Verificar baneo
        if user_id in ban_users:
            logger.warning(f"Intento de uso por usuario baneado: {user_id}")
            return
        
        # Paso 2: Verificar si el usuario tiene un plan
        user_plan = await get_user_plan(user_id)
        if user_plan is None:
            await send_protected_message(
                message.chat.id,
                "üîí **Usted no tiene acceso para usar este bot.**\n\n"
                "Para contratar un plan, contacte con @InfiniteNetworkAdmin."
            )
            return
        
        # Paso 3: Verificar si ya tiene una confirmaci√≥n pendiente
        if await has_pending_confirmation(user_id):
            logger.info(f"Usuario {user_id} tiene confirmaci√≥n pendiente, ignorando video adicional")
            return
        
        # Paso 4: Verificar l√≠mite de plan
        if await check_user_limit(user_id):
            await send_protected_message(
                message.chat.id,
                f"‚ö†Ô∏è **L√≠mite alcanzado**\n"
                f"Has usado {user_plan['used']}/{PLAN_LIMITS[user_plan['plan']]} videos.\n\n"
                "üì©**Contacta con @InfiniteNetworkAdmin para actualizar tu Plan**"
            )
            return
        
        # Paso 5: Verificar si ya hay una compresi√≥n activa o en cola
        if await has_active_compression(user_id) or await has_pending_in_queue(user_id):
            await send_protected_message(
                message.chat.id,
                "‚è≥ Ya tienes un video en proceso de compresi√≥n o en cola.\n"
                "Por favor espera a que termine antes de enviar otro video."
            )
            return
        
        # Paso 6: Crear confirmaci√≥n pendiente
        confirmation_id = await create_confirmation(
            user_id,
            message.chat.id,
            message.id,
            message.video.file_id,
            message.video.file_name
        )
        
        # Paso 7: Enviar mensaje de confirmaci√≥n con botones
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ Confirmar compresi√≥n", callback_data=f"confirm_{confirmation_id}")],
            [InlineKeyboardButton("‚ùå Cancelar", callback_data=f"cancel_{confirmation_id}")]
        ])
        
        await send_protected_message(
            message.chat.id,
            f"üé¨ **Video recibido para comprim√≠r:** `{message.video.file_name}`\n"
            f"¬øDeseas comprimir este video?",
            reply_markup=keyboard
        )
        
        logger.info(f"Solicitud de confirmaci√≥n creada para {user_id}: {message.video.file_name}")
    except Exception as e:
        logger.error(f"Error en handle_video: {e}", exc_info=True)

@app.on_message(filters.text)
async def handle_message(client, message):
    try:
        text = message.text
        username = message.from_user.username
        chat_id = message.chat.id
        user_id = message.from_user.id

        if user_id in ban_users:
            logger.warning(f"Usuario baneado intent√≥ interactuar: {user_id}")
            return

        logger.info(f"Mensaje recibido de {user_id}: {text}")

        if text.startswith(('/calidad', '.calidad')):
            update_video_settings(text[len('/calidad '):])
            await message.reply(f"‚öôÔ∏è Configuraci√≥n Actualizada‚úÖ: {video_settings}")
        elif text.startswith(('/settings', '.settings')):
            await settings_menu(client, message)
        elif text.startswith(('/banuser', '.banuser', '/deluser', '.deluser')):
            if user_id in admin_users:
                await ban_or_delete_user_command(client, message)
            else:
                logger.warning(f"Intento no autorizado de banuser/deluser por {user_id}")
        elif text.startswith(('/cola', '.cola')):
            if user_id in admin_users:
                await ver_cola_command(client, message)
        elif text.startswith(('/auto', '.auto')):
            if user_id in admin_users:
                await startup_command(client, message)
        elif text.startswith(('/myplan', '.myplan')):
            await my_plan_command(client, message)
        elif text.startswith(('/setplan', '.setplan')):
            if user_id in admin_users:
                await set_plan_command(client, message)
        elif text.startswith(('/resetuser', '.resetuser')):
            if user_id in admin_users:
                await reset_user_command(client, message)
        elif text.startswith(('/userinfo', '.userinfo')):
            if user_id in admin_users:
                await user_info_command(client, message)
        elif text.startswith(('/planes', '.planes')):
            await planes_command(client, message)
        elif text.startswith(('/generatekey', '.generatekey')):
            if user_id in admin_users:
                await generate_key_command(client, message)
        elif text.startswith(('/listkeys', '.listkeys')):
            if user_id in admin_users:
                await list_keys_command(client, message)
        elif text.startswith(('/user', '.user')):
            if user_id in admin_users:
                await list_users_command(client, message)
        elif text.startswith(('/admin', '.admin')):
            if user_id in admin_users:
                await admin_stats_command(client, message)
        elif text.startswith(('/restuser', '.restuser')):
            if user_id in admin_users:
                await reset_all_users_command(client, message)
        elif text.startswith(('/desuser', '.desuser')):
            if user_id in admin_users:
                await unban_user_command(client, message)
        elif text.startswith(('/msg', '.msg')):
            if user_id in admin_users:
                await broadcast_command(client, message)

        if message.reply_to_message:
            original_message = sent_messages.get(message.reply_to_message.id)
            if original_message:
                user_id = original_message["user_id"]
                sender_info = f"Respuesta de @{message.from_user.username}" if message.from_user.username else f"Respuesta de user ID: {message.from_user.id}"
                await send_protected_message(user_id, f"{sender_info}: {message.text}")
                logger.info(f"Respuesta enviada a {user_id}")
    except Exception as e:
        logger.error(f"Error en handle_message: {e}", exc_info=True)

# ======================== FUNCIONES AUXILIARES ======================== #

async def notify_group(client, message: Message, original_size: int, compressed_size: int = None, status: str = "start"):
    try:
        group_id = -4826894501  # Reemplaza con tu ID de grupo

        user = message.from_user
        username = f"@{user.username}" if user.username else "Sin username"
        file_name = message.video.file_name or "Sin nombre"
        size_mb = original_size // (1024 * 1024)

        if status == "start":
            text = (
                "üì§ **Nuevo video recibido para comprimir**\n\n"
                f"üë§ **Usuario:** {username}\n"
                f"üÜî **ID:** `{user.id}`\n"
                f"üì¶ **Tama√±o original:** {size_mb} MB\n"
                f"üìÅ **Nombre:** `{file_name}`"
            )
        elif status == "done":
            compressed_mb = compressed_size // (1024 * 1024)
            text = (
                "üì• **Video comprimido y enviado**\n\n"
                f"üë§ **Usuario:** {username}\n"
                f"üÜî **ID:** `{user.id}`\n"
                f"üì¶ **Tama√±o original:** {size_mb} MB\n"
                f"üìâ **Tama√±o comprimido:** {compressed_mb} MB\n"
                f"üìÅ **Nombre:** `{file_name}`"
            )

        await app.send_message(chat_id=group_id, text=text)
        logger.info(f"Notificaci√≥n enviada al grupo: {user.id} - {file_name} ({status})")
    except Exception as e:
        logger.error(f"Error enviando notificaci√≥n al grupo: {e}")

# ======================== INICIO DEL BOT ======================== #

try:
    logger.info("Iniciando el bot...")
    app.run()
except Exception as e:
    logger.critical(f"Error fatal al iniciar el bot: {e}", exc_info=True)